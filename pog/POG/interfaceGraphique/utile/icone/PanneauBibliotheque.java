/*
 * POG
 * Copyright (C) 2004 Team POG
  *
 * This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


 /* Generated by Together */
package POG.interfaceGraphique.utile.icone;
 import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.datatransfer.StringSelection;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DragSourceListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileFilter;
import java.util.HashMap;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;

import POG.interfaceGraphique.fenetre.FenetrePrincipale;
import POG.utile.PogToolkit;

/**
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: IUP ISI </p>
 * @author : CASTAIGNAU Guillaume
 * @version 1.0
 */

public class PanneauBibliotheque extends JPanel
{

  private BorderLayout borderLayout1 = new BorderLayout();
  private GridLayout gridLayout = new GridLayout();
  private JScrollPane jScrollPane1 = new JScrollPane();
  private JButton jButton1 = new JButton();
  private JPanel jPanel1 = new JPanel();
  private JPopupMenu popup = null;
  private ImageIcon theIcon = null;
  private String pathIcon = new String();
  HashMap icones = new HashMap();


  /**
   * @supplierCardinality 1
   * @directed
   */
  private FenetrePrincipale lnkFenetrePrincipale;
  public PanneauBibliotheque(FenetrePrincipale fp)
  {
    lnkFenetrePrincipale = fp;
    try
    {

      jbInit();
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }
  }

  public Object [] filtreExtension(String path, String filt) {
    File bibli = new File(path);
    File[] listFile =  bibli.listFiles(new FiltrerExt(filt));
    Vector res = new Vector();

    for (int i = 0; i < listFile.length; i++) {
      if (listFile[i].isFile())
        res.add(listFile[i]);
      else if (listFile[i].isDirectory()) {
        Object[] tmp2 = filtreExtension(listFile[i].getAbsolutePath(), filt);
        for (int j = 0; j < tmp2.length; j++)
          res.add(tmp2[j]);
      }
    }
    return res.toArray();

  }

  public void lancerPopUpMenu(JLabel icone,int x,int y) {
    JPopupMenu popup = new JPopupMenu();
   theIcon = (ImageIcon)icone.getIcon();
    JMenuItem modifier = new JMenuItem(
        lnkFenetrePrincipale.getLnkLangues().valeurDe("modificone"));

    modifier.addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent evt)   {
          if (evt.getButton() == MouseEvent.BUTTON1)
            {
              //lnkFenetrePrincipale.lancerIconEditor((String)(icones.get(theIcon)));
            }
        }
        });

    JMenuItem supprimer = new JMenuItem(
        lnkFenetrePrincipale.getLnkLangues().valeurDe("suppricone"));

    supprimer.addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent evt)   {
          if (evt.getButton() == MouseEvent.BUTTON1)
            {
              lnkFenetrePrincipale.getLnkSysteme().supprimerLienIcone(theIcon);
              File fileIcone = new File((String)(icones.get(theIcon)));
              fileIcone.delete();
              load();
              lnkFenetrePrincipale.getLnkArbreExplorateur().load();
//              lnkFenetrePrincipale.getLnkArbrePresentation().load();
              lnkFenetrePrincipale.getLnkControleurPanneaux().reload();
            }
        }
        });

    /*JMenuItem reorganiser = new JMenuItem(
        lnkFenetrePrincipale.getLnkLangues().valeurDe("Reorganiser"));

    reorganiser.addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent evt)   {
          if (evt.getButton() == MouseEvent.BUTTON1)
            {
              load();
            }
        }
        });*/

    popup.add(supprimer);
    popup.add(modifier);
    //popup.add(reorganiser);
    popup.show(icone,x,y);

  }

  public void load(){
    JLabel jLabel;
    ImageIcon icon;
    Object[] listFichIcon = filtreExtension(lnkFenetrePrincipale.getLnkSysteme().getLnkPreferences().get_pathIconeDefaut(), "gif");


    jPanel1.removeAll();

    int nbCol = jScrollPane1.getViewport().getWidth()/32;
    int nbLi = listFichIcon.length / nbCol + 1;

    gridLayout.setColumns(nbCol);
    gridLayout.setRows(nbLi);

    icones.clear();

    for(int i = 0; i < listFichIcon.length; i++){
      try{
        jLabel = new JLabel();

        addDragListener(jLabel);

        icon = PogToolkit.createImageIcon(((File)listFichIcon[i]).getAbsolutePath());

        /*Stockage des icones et de leur chemin dans la HashMap*/
        icones.put(icon,((File)listFichIcon[i]).getAbsolutePath());

        icon.setImageObserver(jLabel);
        jLabel.setIcon(icon);
        jLabel.setToolTipText(((File)listFichIcon[i]).getName());
        jLabel.setPreferredSize(new Dimension(32, 32));
        theIcon = icon;


        jLabel.addMouseListener(new MouseAdapter() {
        public void mouseClicked(MouseEvent evt)   {
          if (evt.getButton() == MouseEvent.BUTTON3){
            lancerPopUpMenu((JLabel)evt.getSource(),evt.getX(),evt.getY());
          }
          else if ((evt.getButton() == MouseEvent.BUTTON1) && (evt.getClickCount() >= 2)){
            //lnkFenetrePrincipale.lancerIconEditor((String)(icones.get(theIcon)));
          }
        }
        });
        jPanel1.add(jLabel);
      }
      catch(Exception e){
        System.out.println("File not Found : " + ((File)listFichIcon[i]).getAbsolutePath());
      }
    }
    this.updateUI();

  }

  private void jbInit() throws Exception
  {
    this.setBorder(null);
    this.setLayout(borderLayout1);


    jPanel1.setBackground(Color.white);
    jPanel1.setLayout(gridLayout);

    jButton1.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        File ff = lnkFenetrePrincipale.iconeChooser(null);
        if (ff != null)
        	PogToolkit.copyFile(ff.getAbsolutePath(), lnkFenetrePrincipale.getLnkSysteme().getLnkPreferences().get_pathIconeDefaut() + File.separator + ff.getName());
        load();
      }
    });

    jScrollPane1.getViewport().add(jPanel1, null);

    jButton1.setText(lnkFenetrePrincipale.getLnkLangues().valeurDe("Ajouter"));

    this.add(jButton1, BorderLayout.NORTH);
    this.add(jScrollPane1, BorderLayout.CENTER);

  }

  private Vector _vectAllDrag = new Vector();
  public void addDragListener(JLabel lbl) {
    _vectAllDrag.add(new MyDragClass(lbl));
  }


  private class MyDragClass  implements DragSourceListener, DragGestureListener {

    private DragSource _dragSource = null;
    private JLabel _source;

    public MyDragClass(JLabel lbl) {
      _source = lbl;
      _dragSource = new DragSource();
      _dragSource.createDefaultDragGestureRecognizer(lbl,
          DnDConstants.ACTION_MOVE, this);
    }

    /** << Impl\uFFFDmentation inutilis\uFFFDe de l'interface DragSourceListener >> */
    public void dragDropEnd(DragSourceDropEvent event) {}

    /** << Impl\uFFFDmentation inutilis\uFFFDe de l'interface DragSourceListener >> */
    public void dragEnter(DragSourceDragEvent event) {}

    /** << Impl\uFFFDmentation inutilis\uFFFDe de l'interface DragSourceListener >> */
    public void dragExit(DragSourceEvent event) {}

    /** << Impl\uFFFDmentation inutilis\uFFFDe de l'interface DragSourceListener >> */
    public void dragOver(DragSourceDragEvent event) {}

    /** << Impl\uFFFDmentation inutilis\uFFFDe de l'interface DragSourceListener >> */
    public void dropActionChanged(DragSourceDragEvent event) {}

    /** Traitement de l'\uFFFDvenement "l'utilisateur tente de faire un drag"
         * @param event  Evenement DragGestureEvent associ\uFFFD \uFFFD l'initialisation du Drag
     */
    public void dragGestureRecognized(DragGestureEvent event) {
      ImageIcon theIcon = (ImageIcon) _source.getIcon();
      File fileIcone = new File( (String) (icones.get(theIcon)));
      String s = "IMG=> " + fileIcone.getAbsolutePath();
      StringSelection text = new StringSelection(s);
      _dragSource.startDrag(event, DragSource.DefaultMoveDrop, text, this);
    }
  }

}

class FiltrerExt implements FileFilter{
    private String _ext;
    public FiltrerExt (String ext) {
      _ext = ext;
    }

    //Filtre qui accepte les fichiers qui ont l'extension egale a _ext et
    //les r\uFFFDpertoires.
    public boolean accept(File fich) {
      if (fich.isDirectory())
        return true;
      else{
        int index = fich.getName().lastIndexOf(".");
        if (index == -1)
          return false;
        else
          return _ext.equalsIgnoreCase(fich.getName().substring(index + 1));
      }
    }
  }
