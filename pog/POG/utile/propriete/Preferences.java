/*
 * POG
 * Copyright (C) 2004 Team POG
  *
 * This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


/* Generated by Together */
package POG.utile.propriete;


import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLDecoder;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.prefs.BackingStoreException;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;

import org.ipsquad.apes.model.extension.ActivityDiagram;
import org.ipsquad.apes.model.extension.ContextDiagram;
import org.ipsquad.apes.model.extension.FlowDiagram;
import org.ipsquad.apes.model.extension.ResponsabilityDiagram;
import org.ipsquad.apes.model.extension.WorkDefinitionDiagram;
import org.ipsquad.apes.model.spem.modelmanagement.SPackage;
import org.ipsquad.apes.model.spem.process.structure.Activity;
import org.ipsquad.apes.model.spem.process.structure.ProcessPerformer;
import org.ipsquad.apes.model.spem.process.structure.ProcessRole;
import org.ipsquad.apes.model.spem.process.structure.WorkDefinition;
import org.ipsquad.apes.model.spem.process.structure.WorkProduct;
import org.ipsquad.utils.IconManager;

import POG.interfaceGraphique.fenetre.FenetrePrincipale;
import POG.utile.MyMultiFileFilter;
import POG.utile.PogToolkit;

public class Preferences {

  public static Preferences MyInstance;

  private String _langue = Langues.LANGUEDEFAUT;
  private String _pathApes = System.getProperty("user.dir") + File.separator + "apes2.jar";
  private String _pathIconeDefaut = System.getProperty("user.dir");
  private HashMap _associationDocExe = new HashMap();
  public static final String REPPREF = System.getProperty("user.home") + File.separatorChar + ".apes2" + File.separatorChar;
  private IconManager _im;
  private HashMap _icoFile = new HashMap();
  private String _pathBiblio = System.getProperty("user.dir");
  private String _laf = UIManager.getLookAndFeel().toString() ;
  private FenetrePrincipale _lnkFenetrePrincipale ;
  private static java.util.prefs.Preferences prefUser = java.util.prefs.Preferences.userNodeForPackage(Preferences.class);
  private static java.util.prefs.Preferences prefExt = java.util.prefs.Preferences.userNodeForPackage(java.util.HashMap.class);
	
	private String _editeurPerso = "PIKA";

  public Preferences(FenetrePrincipale fp) throws ClassNotFoundException {
    this._lnkFenetrePrincipale = fp ;
    MyInstance = this;
    // Creation du repertoire de preferences si inexistant
    if (!PogToolkit.folderExists(REPPREF))
      if (PogToolkit.createFolder(REPPREF) == null)
      	System.out.println("Erreur création préférences.");
        //PogToolkit.showErrorMsg(fp.getLnkLangues().valeurDe("errcreationreppref"), fp);

// Mise en téléchargement de l'aide
//    extractHelp();

	File ff = new File(REPPREF + File.separatorChar + "AidePOG");
	if (!ff.exists())
		fp.getLnkDebug().debogage("Vous n'avez pas d'aide installée. Il faut la télécharger à partir du site Internet de POG.");

    String fichierLangueDefaut = REPPREF + File.separatorChar + Langues.NOMBASE + "_" + Langues.LANGUEDEFAUT + ".properties";
    if (!PogToolkit.fileExists(fichierLangueDefaut))
      extractLangue(fichierLangueDefaut);

    chargerPrefs();

    // Prise en compte des versions des langues
	if (!Langues.versionLangue(Langues.LANGUEDEFAUT))
		extractLangue(fichierLangueDefaut);

    try {
      ClassLoader.getSystemClassLoader().loadClass("org.ipsquad.utils.IconManager");
    }
    catch (Exception e) {
      if ((new File(_pathApes)).exists()) {
        System.setProperty("java.class.path",  _pathApes + File.pathSeparator + System.getProperty("java.class.path"));
        System.out.println("ClassPATH: " + System.getProperty("java.class.path"));
        throw new ClassNotFoundException();
      }
      JFileChooser jf = new JFileChooser(new File("./"));
      jf.setFileSelectionMode(JFileChooser.FILES_ONLY);
      jf.setDialogTitle("Chemin du jar APES2");
      MyMultiFileFilter fileFilter = new MyMultiFileFilter(".jar");
      jf.addChoosableFileFilter((FileFilter)fileFilter);
      if (jf.showOpenDialog(null)== JFileChooser.APPROVE_OPTION) {
        _pathApes = jf.getSelectedFile().getAbsolutePath();
        System.out.println("PATHAPES: " + _pathApes);
        sauverPrefs();
        System.setProperty("java.class.path", _pathApes + File.pathSeparator + System.getProperty("java.class.path"));
        System.out.println("ClassPATH: " + System.getProperty("java.class.path"));
        throw new ClassNotFoundException();
      }
      else {
        System.out.println("ERREUR RESTART");
      }
    }
    _im = IconManager.getInstance();
  }

  private void extractHelp(){
    // Extraction de l'aide
    if (!PogToolkit.folderExists(REPPREF + File.separatorChar + "AidePog")) {
      System.out.println("Veuillez patienter pendant la copie de l'aide, cette operation peut prendre plusieurs secondes et ne sera plus effectue a l'avenir ...");
      File ff = new File(REPPREF + File.separatorChar + "AidePOG");
      try {
        URL ip = ClassLoader.getSystemResource("AidePog");
        String sip = URLDecoder.decode(ip.getFile());
        File fi = new File(sip.substring(5, sip.lastIndexOf("!")));
        if (!fi.exists())
          System.out.println("ERREUR AIDE");
//fi = fi.substring(fi.lastIndexOf(File.separator) + 1);
        JarFile jf = new JarFile(fi);
        Enumeration en = jf.entries();
        while (en.hasMoreElements()) {
          JarEntry ob = (JarEntry)en.nextElement();
          if (!ob.isDirectory() && ob.getName().startsWith("AidePog")) {
            InputStream is = jf.getInputStream(ob);
            String strf =  ob.getName();
            File fis = new File(REPPREF + strf);
            fis.getParentFile().mkdirs();
            if (fis.createNewFile()) {
              FileOutputStream fos = new FileOutputStream(fis);
              PogToolkit.extractStream(is, fos);
            }
          }
        }
                System.out.println("Extraction termine.");
      }
      catch (NullPointerException e) {
        System.out.println("...Aide introuvable dans le jar");
      } catch (IOException e) {
                e.printStackTrace();
      }
    }

  }


  /**
   *
   */
  private void extractLangue(String fichierLangueDefaut) {
    System.out.println("Extraction des langues (Mise à jour)");
    try
    {
      InputStream in = ClassLoader.getSystemResourceAsStream("POG/" + Langues.NOMBASE + "_" + Langues.LANGUEDEFAUT + ".properties");
      File ff = new File(fichierLangueDefaut);
      if (!ff.exists()) {
              ff.getParentFile().mkdirs();
              ff.createNewFile();
      }

      FileOutputStream fo = new FileOutputStream(fichierLangueDefaut);
      int c;
      while ((c = in.read()) != -1)
            fo.write(c);
      fo.close();
      in.close();
    }
    catch (Exception e) {
            e.printStackTrace();
    }
  }



  public static Preferences charger(FenetrePrincipale fp) throws ClassNotFoundException {
    Preferences prefs = new Preferences(fp);
    return prefs;
  }

  public String get_langue() {
    return _langue;
  }

  public void set_langue(String l)
  {
    this._langue = l ;
  }

  public String get_guide() {
    return "fichXMLGuide";
  }

  public String get_laf()
  {
    return this._laf;
  }

  public void set_laf(String laf)
  {
    try
    {
      UIManager.setLookAndFeel (laf) ;
      SwingUtilities.updateComponentTreeUI(this._lnkFenetrePrincipale) ;
      this._laf = laf;
    }
    catch (Exception ex) {}
  }

	public String get_editeur(String ext) {
		if (ext.endsWith("html") || ext.endsWith("htm"))
			return _editeurPerso;
		return( (String)_associationDocExe.get(ext));
  }

  public HashMap getAssociations()
  {
    return this._associationDocExe;
  }

  public void setAssociations(HashMap m)
  {
    this._associationDocExe = m ;
  }

  public ImageIcon getIconeDefaut(Object element) {
    if (element instanceof String)
      return getIcone((String)element);
    if (element instanceof SPackage)
      return getIcone("TreePackage");
    if (element instanceof Activity)
      return getIcone("TreeActivity");
    if (element instanceof WorkDefinition)
      return getIcone("TreeWorkDefinition");
    if (element instanceof WorkProduct)
      return getIcone("TreeWorkProduct");
    if (element instanceof ProcessRole)
      return getIcone("TreeRole");
    if (element instanceof ActivityDiagram)
      return getIcone("TreeActivityDiagram");
    if (element instanceof ContextDiagram)
      return getIcone("TreeCtxDiag");
    if (element instanceof ResponsabilityDiagram)
      return getIcone("TreeResponsabilityDiagram");
    if (element instanceof FlowDiagram)
      return getIcone("TreeClassDiagram");
    if (element instanceof WorkDefinitionDiagram)
      return getIcone("TreeWorkDefFlow");
    if (element instanceof ProcessPerformer)
      return getIcone("ProcessPerformer");
    _lnkFenetrePrincipale.getLnkDebug().debogage(_lnkFenetrePrincipale.getLnkLangues().valeurDe("iconemanque").replaceFirst("ARG0", element.getClass().getName()));
    return getIcone("POG/interfaceGraphique/utile/icone/defaut/defaut_icon.gif");
  }

  private ImageIcon getIcone(String nom) {
    ImageIcon ii = null;
    String thepath = nom;

    if (PogToolkit.fileExists(nom))
      ii = new ImageIcon(nom);

    if (ii == null)
      ii = myGetIcon(nom);

    // Cherche dans la bibliotheque d'icone
    if ((this._pathIconeDefaut != null) && (ii == null)) {
      thepath = _pathIconeDefaut + File.separator + nom + ".gif";
      ii = myGetIcon(thepath);
    }

    // Cherche dans la bibliotheque
    if ((_pathBiblio != null) && (ii == null)) {
      thepath = _pathBiblio + File.separator + nom + ".gif";
      ii = myGetIcon(thepath);
    }

    // Cherche dans POG
    if (ii == null) {
      thepath = "POG/interfaceGraphique/utile/icone/defaut/" + nom + ".gif";
      ii = myGetIcon(thepath);
    }

    // Cherche dans APES
    if (ii == null) {
      thepath = "icons/" + nom + ".gif";
      ii = myGetIcon(thepath);
    }

    // Sinon, icone par defaut
    if (ii == null) {
      _lnkFenetrePrincipale.getLnkDebug().debogage(_lnkFenetrePrincipale.getLnkLangues().valeurDe("iconemanque").replaceFirst("ARG0", nom));
      thepath = "POG/interfaceGraphique/utile/icone/defaut/defaut_icon.gif";
      ii = myGetIcon(thepath);
    }

    if (ii == null)
      return null;

    // Si l'element existe, on le renvoie (ici pour avoir le bon path)
    if (_icoFile.containsValue(thepath)) {
      Iterator it = _icoFile.keySet().iterator();
      while (it.hasNext()) {
        ImageIcon ico = (ImageIcon)it.next();
        if (((String)_icoFile.get(ico)).equals(thepath))
          return ico;
      }
    }//*/

    _icoFile.put(ii, thepath);
    return ii;
  }

  private ImageIcon myGetIcon(String nom) {
    try {
      return (ImageIcon)_im.getIcon(nom);
    }
    catch (Exception e) {
      return null;
    }
  }

  public String get_pathBiblio() {
    return _pathBiblio;
  }

  public void set_pathBiblio(String _pathBiblio){
    this._pathBiblio = _pathBiblio;
  }

  public String getCheminIcon(ImageIcon i) {
    return (String)_icoFile.get(i);
  }

  public void chargerPrefs()
  {
    InputStream isUser = null;
    InputStream isExt = null;
    try {
        isUser = new BufferedInputStream(new FileInputStream(REPPREF+"POGPreferencesUser.xml"));
        isExt = new BufferedInputStream(new FileInputStream(REPPREF+"POGPreferencesExt.xml"));
    } catch (FileNotFoundException e) {}

    // Importe les preferences
    try {
        java.util.prefs.Preferences.importPreferences(isUser);
        java.util.prefs.Preferences.importPreferences(isExt);
    } catch (Exception e) {}

    this._langue = Preferences.prefUser.get("langue", Langues.LANGUEDEFAUT);
    this.set_laf(Preferences.prefUser.get("lookandfeel", UIManager.getLookAndFeel().toString()));
    this.setPathApes(Preferences.prefUser.get("pathApes", System.getProperty("user.dir") + File.separator + "apes2-1.5-java1.4.jar"));
    this.setPathIcones(Preferences.prefUser.get("pathCheminIconesDefaut", System.getProperty("user.dir")));
    this.set_pathBiblio(Preferences.prefUser.get("pathCheminBiblio", System.getProperty("user.dir")));
    String[] keys={};
    try
    {
      keys = Preferences.prefExt.keys();
    }
    catch(BackingStoreException e){}
    for (int i=0; i < keys.length; i++)
    {
        this._associationDocExe.put( (String) keys[i], prefExt.get( (String) keys[i], "chemin de l'executable"));
    }
  }

  public void sauverPrefs()
  {
    try
    {
      Preferences.prefUser.clear();
      Preferences.prefExt.clear();
    }
    catch(Exception e){}
    Preferences.prefUser.put("langue", _langue);
    Preferences.prefUser.put("lookandfeel", _laf);
    Preferences.prefUser.put("pathApes", this._pathApes);
    Preferences.prefUser.put("pathCheminIconesDefaut", this._pathIconeDefaut);
    Preferences.prefUser.put("pathCheminBiblio", this._pathBiblio);
    for(Iterator it = _associationDocExe.entrySet().iterator(); it.hasNext();)
    {
      Map.Entry entry = (Map.Entry)it.next();
      Preferences.prefExt.put((String)entry.getKey(), (String)entry.getValue());
    }
    try {
        // Exporte le node dans un fichier
        prefUser.exportNode(new FileOutputStream(REPPREF+"POGPreferencesUser.xml"));
        prefExt.exportNode(new FileOutputStream(REPPREF+"POGPreferencesExt.xml"));
    } catch (Exception e) {}
  }

  public void setPathIcones(String path){
    this._pathIconeDefaut = path;
  }

  public String getPathIcones() {
    return this._pathIconeDefaut;
  }

  public String getPathApes() {
    return this._pathApes;
  }

  public void setPathApes(String path)
  {
    this._pathApes = path;
  }
}