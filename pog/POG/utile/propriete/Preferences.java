/*
 * POG
 * Copyright (C) 2004 Team POG
  *
 * This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


/* Generated by Together */
package POG.utile.propriete;


import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.prefs.BackingStoreException;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;

import org.ipsquad.apes.model.extension.ActivityDiagram;
import org.ipsquad.apes.model.extension.ContextDiagram;
import org.ipsquad.apes.model.extension.FlowDiagram;
import org.ipsquad.apes.model.extension.ResponsabilityDiagram;
import org.ipsquad.apes.model.extension.WorkDefinitionDiagram;
import org.ipsquad.apes.model.spem.modelmanagement.SPackage;
import org.ipsquad.apes.model.spem.process.structure.Activity;
import org.ipsquad.apes.model.spem.process.structure.ProcessPerformer;
import org.ipsquad.apes.model.spem.process.structure.ProcessRole;
import org.ipsquad.apes.model.spem.process.structure.WorkDefinition;
import org.ipsquad.apes.model.spem.process.structure.WorkProduct;
import org.ipsquad.utils.IconManager;

import POG.application.controleurMetier.ControleurExporter;
import POG.interfaceGraphique.fenetre.FenetreAPropos;
import POG.interfaceGraphique.fenetre.FenetrePrincipale;
import POG.utile.MyMultiFileFilter;
import POG.utile.PogToolkit;
import POG.utile.ZIP;

public class Preferences {

	public static Preferences MyInstance;
	public static final String REPPREF = System.getProperty("user.home") + File.separatorChar + ".apes2" + File.separatorChar;
	
	
	// ATTENTION : C'est le path de la classe qui permet de retrouver les préférences
	private static java.util.prefs.Preferences prefUser = java.util.prefs.Preferences.userNodeForPackage(Preferences.class);
	private static java.util.prefs.Preferences prefExt = java.util.prefs.Preferences.userNodeForPackage(java.util.HashMap.class);
	private static java.util.prefs.Preferences prefGuide = java.util.prefs.Preferences.userNodeForPackage(ZIP.class);
	private static java.util.prefs.Preferences prefProduit = java.util.prefs.Preferences.userNodeForPackage(ControleurExporter.class);
	private static java.util.prefs.Preferences prefPlanType = java.util.prefs.Preferences.userNodeForPackage(FenetreAPropos.class);
	
	private HashMap _preferences = new HashMap();

	private HashMap _associationDocExe = new HashMap();
	private HashMap _associationGuide = new HashMap();
	private HashMap _associationProduit = new HashMap();
	private HashMap _associationPlanTypes = new HashMap();
	
	private HashMap _icoFile = new HashMap();

	private FenetrePrincipale _lnkFenetrePrincipale ;
	private IconManager _im;
	
//private String _editeurPerso = "PIKA";

  public Preferences(FenetrePrincipale fp) throws ClassNotFoundException {
    this._lnkFenetrePrincipale = fp ;
    MyInstance = this;
    
    
    
    // Mise des préférences par défaut :
	set_langue(Langues.LANGUEDEFAUT);
	set_pathApes(System.getProperty("user.dir") + File.separator + "apes2.jar");
	set_pathIconeDefaut(System.getProperty("user.dir"));
	set_pathPre(System.getProperty("user.dir"));
	set_pathPog(System.getProperty("user.dir"));
	set_pathModeleApes(System.getProperty("user.dir"));
	set_pathBiblio(System.getProperty("user.dir"));
	set_laf(UIManager.getLookAndFeel().toString());
	set_utiliseCheminModele(new String("oui"));
	set_defIcoElem("defaut_icon");
	set_defIcoPack("TreeComponent");
    
    
    
    // Creation du repertoire de preferences si inexistant
    if (!PogToolkit.folderExists(REPPREF))
      if (PogToolkit.createFolder(REPPREF) == null)
      	System.out.println("Erreur création préférences.");
        //PogToolkit.showErrorMsg(fp.getLnkLangues().valeurDe("errcreationreppref"), fp);

    String fichierLangueDefaut = REPPREF + Langues.NOMBASE + "_" + Langues.LANGUEDEFAUT + ".properties";
    if (!PogToolkit.fileExists(fichierLangueDefaut))
      extractLangue();      
     
	if (!PogToolkit.fileExists(REPPREF + "plantypes" + File.separatorChar + "ac_type.html"))
		extractFichier("plantypes", "ac_type.html");
	if (!PogToolkit.fileExists(REPPREF + "plantypes" + File.separatorChar + "dt_type.html"))
		extractFichier("plantypes", "dt_type.html");
	if (!PogToolkit.fileExists(REPPREF + "plantypes" + File.separatorChar + "pr_type.html"))
		extractFichier("plantypes", "pr_type.html");
	if (!PogToolkit.fileExists(REPPREF + "plantypes" + File.separatorChar + "ro_type.html"))
		extractFichier("plantypes", "ro_type.html");
    
    chargerPrefs();

    // Prise en compte des versions des langues
	if (!Langues.versionLangue(Langues.LANGUEDEFAUT))
		extractLangue();

    try {
      ClassLoader.getSystemClassLoader().loadClass("org.ipsquad.utils.IconManager");
    }
    catch (Exception e) {
      if ((new File(get_pathApes())).exists()) {
        System.setProperty("java.class.path",  get_pathApes() + File.pathSeparator + System.getProperty("java.class.path"));
        System.out.println("ClassPATH: " + System.getProperty("java.class.path"));
        throw new ClassNotFoundException();
      }
      JFileChooser jf = new JFileChooser(new File("./"));
      jf.setFileSelectionMode(JFileChooser.FILES_ONLY);
      jf.setDialogTitle("Chemin du jar APES2");
      MyMultiFileFilter fileFilter = new MyMultiFileFilter(".jar");
      jf.addChoosableFileFilter((FileFilter)fileFilter);
      if (jf.showOpenDialog(null)== JFileChooser.APPROVE_OPTION) {
		set_pathApes(jf.getSelectedFile().getAbsolutePath());
        System.out.println("PATHAPES: " + get_pathApes());
        sauverPrefs();
        System.setProperty("java.class.path", get_pathApes() + File.pathSeparator + System.getProperty("java.class.path"));
        System.out.println("ClassPATH: " + System.getProperty("java.class.path"));
        throw new ClassNotFoundException();
      }
      else {
        System.out.println("ERREUR RESTART");
      }
    }
    _im = IconManager.getInstance();
  }

  private void extractLangue() {
    System.out.println("Mise à jour des langues");
    extractFichier("", Langues.NOMBASE + "_" + Langues.LANGUEDEFAUT + ".properties");
  }

  private void extractFichier(String rep, String nomfich) {
	System.out.println("...Extraction de " + nomfich);
	try
	{
	  InputStream in = ClassLoader.getSystemResourceAsStream("POG/" + nomfich);
	  File ff = new File(REPPREF + rep + File.separatorChar + nomfich);
	  if (!ff.exists()) {
			  ff.getParentFile().mkdirs();
			  ff.createNewFile();
	  }
	  FileOutputStream fo = new FileOutputStream(REPPREF + rep + File.separatorChar + nomfich);
	  int c;
	  while ((c = in.read()) != -1)
			fo.write(c);
	  fo.close();
	  in.close();
	}
	catch (Exception e) {
			e.printStackTrace();
	}
  }


  public static Preferences charger(FenetrePrincipale fp) throws ClassNotFoundException {
    Preferences prefs = new Preferences(fp);
    return prefs;
  }

  public HashMap get_guide() {
    return _associationGuide;
  }
  public void set_guide(HashMap m)
  {
	this._associationGuide = m ;
  }

  public HashMap get_produit() {
	return _associationProduit;
  }
  public void set_produit(HashMap m)
  {
	this._associationProduit = m ;
  }


	public String get_editeur(String ext) {
/*		if (ext.endsWith("html") || ext.endsWith("htm"))
			return _editeurPerso;*/
		return( (String)_associationDocExe.get(ext));
  }

  public HashMap getAssociations()
  {
    return this._associationDocExe;
  }

  public void setAssociations(HashMap m)
  {
    this._associationDocExe = m ;
  }

  public ImageIcon getIconeDefaut(Object element) {
    if (element instanceof String)
      return getIcone((String)element);
    if (element instanceof SPackage)
      return getIcone("TreePackage");
    if (element instanceof Activity)
      return getIcone("TreeActivity");
    if (element instanceof WorkDefinition)
      return getIcone("TreeWorkDefinition");
    if (element instanceof WorkProduct)
      return getIcone("TreeWorkProduct");
    if (element instanceof ProcessRole)
      return getIcone("TreeRole");
    if (element instanceof ActivityDiagram)
      return getIcone("TreeActivityDiagram");
    if (element instanceof ContextDiagram)
      return getIcone("TreeCtxDiag");
    if (element instanceof ResponsabilityDiagram)
      return getIcone("TreeResponsabilityDiagram");
    if (element instanceof FlowDiagram)
      return getIcone("TreeClassDiagram");
    if (element instanceof WorkDefinitionDiagram)
      return getIcone("TreeWorkDefFlow");
    if (element instanceof ProcessPerformer)
      return getIcone("ProcessPerformer");
    _lnkFenetrePrincipale.getLnkDebug().debogage(_lnkFenetrePrincipale.getLnkLangues().valeurDe("iconemanque").replaceFirst("ARG0", element.getClass().getName()));
    return getIcone("POG/interfaceGraphique/utile/icone/defaut/defaut_icon.gif");
  }

  private ImageIcon getIcone(String nom) {
    ImageIcon ii = null;
    String thepath = nom;

    if (PogToolkit.fileExists(nom))
      ii = new ImageIcon(nom);

    if (ii == null)
      ii = myGetIcon(nom);

	if (ii == null) {
		File tmp = new File(nom);
		nom = tmp.getName();
		if (nom.indexOf('.') != -1)
			nom = nom.substring(0, nom.lastIndexOf('.'));
	}

    // Cherche dans la bibliotheque d'icone
    if ((get_pathIconeDefaut() != null) && (ii == null)) {
      thepath = get_pathIconeDefaut() + File.separator + nom + ".gif";
      ii = myGetIcon(thepath);
      if ((ii == null) && (PogToolkit.fileExists(thepath)))
	  	ii = new ImageIcon(thepath);
    }

    // Cherche dans la bibliotheque
    if ((get_pathBiblio() != null) && (ii == null)) {
      thepath = get_pathBiblio() + File.separator + nom + ".gif";
      ii = myGetIcon(thepath);
    }

    // Cherche dans POG
    if (ii == null) {
      thepath = "POG/interfaceGraphique/utile/icone/defaut/" + nom + ".gif";
      ii = myGetIcon(thepath);
    }

    // Cherche dans APES
    if (ii == null) {
      thepath = "icons/" + nom + ".gif";
      ii = myGetIcon(thepath);
    }

    // Sinon, icone par defaut
    if (ii == null) {
      _lnkFenetrePrincipale.getLnkDebug().debogage(_lnkFenetrePrincipale.getLnkLangues().valeurDe("iconemanque").replaceFirst("ARG0", nom));
      thepath = "POG/interfaceGraphique/utile/icone/defaut/defaut_icon.gif";
      ii = myGetIcon(thepath);
    }

    if (ii == null)
      return null;

    // Si l'element existe, on le renvoie (ici pour avoir le bon path)
    if (_icoFile.containsValue(thepath)) {
      Iterator it = _icoFile.keySet().iterator();
      while (it.hasNext()) {
        ImageIcon ico = (ImageIcon)it.next();
        if (((String)_icoFile.get(ico)).equals(thepath))
          return ico;
      }
    }//*/

    _icoFile.put(ii, thepath);
    return ii;
  }

  private ImageIcon myGetIcon(String nom) {
    try {
      return (ImageIcon)_im.getIcon(nom);
    }
    catch (Exception e) {
      return null;
    }
  }

  public String getCheminIcon(ImageIcon i) {
    return (String)_icoFile.get(i);
  }

  public void chargerPrefs()
  {
    InputStream isUser = null;
    InputStream isExt = null;
	InputStream isGuide = null;
	InputStream isPlan = null;
    try {
        isUser = new BufferedInputStream(new FileInputStream(REPPREF+"POGPreferencesUser.xml"));
        isExt = new BufferedInputStream(new FileInputStream(REPPREF+"POGPreferencesExt.xml"));
		isGuide = new BufferedInputStream(new FileInputStream(REPPREF+"POGPreferencesGuide.xml"));
		isPlan = new BufferedInputStream(new FileInputStream(REPPREF+"POGPreferencesPlanType.xml"));
    } catch (FileNotFoundException e) {}

    // Importe les preferences
    try {
        java.util.prefs.Preferences.importPreferences(isUser);
        java.util.prefs.Preferences.importPreferences(isExt);
		java.util.prefs.Preferences.importPreferences(isGuide);
		java.util.prefs.Preferences.importPreferences(isPlan);
    } catch (Exception e) {}


	String[] keys={};
	try
	{
	  keys = prefUser.keys();
	}
	catch(BackingStoreException e){}
	for (int i=0; i < keys.length; i++)
	{
		this._preferences.put( (String) keys[i], prefUser.get( (String) keys[i], "chemin de l'executable"));
	}

    try
    {
      keys = Preferences.prefExt.keys();
    }
    catch(BackingStoreException e){}
    for (int i=0; i < keys.length; i++)
    {
        this._associationDocExe.put( (String) keys[i], prefExt.get( (String) keys[i], "chemin de l'executable"));
    }
    keys = new String[0];
	try
	{
	  keys = Preferences.prefGuide.keys();
	}
	catch(BackingStoreException e){}
	for (int i=0; i < keys.length; i++)
	{
		this._associationGuide.put( (String) keys[i], prefGuide.get( (String) keys[i], "type guide"));
	}
	if (_associationGuide.size() == 0) {
		_associationGuide.put("Concept", "GuideConcept.gif");
		_associationGuide.put("Article", "GuideArticle.gif");
		_associationGuide.put("Technique", "GuideTechnique.gif");
		_associationGuide.put("Guide de redaction", "GuideRedaction.gif");
		_associationGuide.put("Liste de controles", "GuideListeControle.gif");
		_associationGuide.put("Plan Type", "GuidePlanType.gif");
		_associationGuide.put("Exemple", "GuideExemple.gif");
		_associationGuide.put("Guide Outil", "GuideOutil.gif");
		_associationGuide.put("Quoi de neuf", "GuideNeuf.gif");
	}
	try
	{
	  keys = Preferences.prefProduit.keys();
	}
	catch(BackingStoreException e){}
	for (int i=0; i < keys.length; i++)
	{
		this._associationProduit.put( (String) keys[i], prefProduit.get( (String) keys[i], "type produit"));
	}
	if (_associationProduit.size() == 0) {
		_associationProduit.put("Document", "ProduitDocument.gif");
		_associationProduit.put("Modèle", "ProduitModele.gif");
		_associationProduit.put("Référentiel", "ProduitReferentiel.gif");
		_associationProduit.put("Objet Métier", "ProduitObjetMetier.gif");
		_associationProduit.put("Autre", "ProduitAutre.gif");
	}
	// Pour remettre un produit à type vide
	_associationProduit.put(" ", "TreeWorkProduct.gif");
	
	try
	{
	  keys = Preferences.prefPlanType.keys();
	}
	catch(BackingStoreException e){}
	for (int i=0; i < keys.length; i++)
	{
		this._associationPlanTypes.put( (String) keys[i], prefPlanType.get( (String) keys[i], "type plan"));
	}
	if (_associationPlanTypes.size() == 0) {
		_associationPlanTypes.put("org.ipsquad.apes.model.spem.process.structure.Activity", REPPREF + "plantypes" + File.separatorChar + "ac_type.html");
		_associationPlanTypes.put("org.ipsquad.apes.model.extension.ApesWorkDefinition", REPPREF + "plantypes" + File.separatorChar + "dt_type.html");
		_associationPlanTypes.put("org.ipsquad.apes.model.spem.process.structure.WorkProduct", REPPREF + "plantypes" + File.separatorChar + "pr_type.html");
		_associationPlanTypes.put("org.ipsquad.apes.model.spem.process.structure.ProcessRole", REPPREF + "plantypes" + File.separatorChar + "ro_type.html");
	}

  }

  public void sauverPrefs()
  {
    try
    {
      Preferences.prefUser.clear();
      Preferences.prefExt.clear();
	  Preferences.prefGuide.clear();
	  Preferences.prefProduit.clear();
	  Preferences.prefPlanType.clear();
    }
    catch(Exception e){}
    
	for(Iterator it = _preferences.entrySet().iterator(); it.hasNext();)
	{
	  Map.Entry entry = (Map.Entry)it.next();
	  Preferences.prefUser.put((String)entry.getKey(), (String)entry.getValue());
	}
    
    for(Iterator it = _associationDocExe.entrySet().iterator(); it.hasNext();)
    {
      Map.Entry entry = (Map.Entry)it.next();
      Preferences.prefExt.put((String)entry.getKey(), (String)entry.getValue());
    }
	for(Iterator it = _associationGuide.entrySet().iterator(); it.hasNext();)
	{
	  Map.Entry entry = (Map.Entry)it.next();
	  Preferences.prefGuide.put((String)entry.getKey(), (String)entry.getValue());
	}
	for(Iterator it = _associationProduit.entrySet().iterator(); it.hasNext();)
	{
	  Map.Entry entry = (Map.Entry)it.next();
	  Preferences.prefProduit.put((String)entry.getKey(), (String)entry.getValue());
	}
	for(Iterator it = _associationPlanTypes.entrySet().iterator(); it.hasNext();)
	{
	  Map.Entry entry = (Map.Entry)it.next();
	  Preferences.prefPlanType.put((String)entry.getKey(), (String)entry.getValue());
	}
    try {
        // Exporte le node dans un fichier
        prefUser.exportNode(new FileOutputStream(REPPREF+"POGPreferencesUser.xml"));
        prefExt.exportNode(new FileOutputStream(REPPREF+"POGPreferencesExt.xml"));
		prefGuide.exportNode(new FileOutputStream(REPPREF+"POGPreferencesGuide.xml"));
		prefProduit.exportNode(new FileOutputStream(REPPREF+"POGPreferencesProduit.xml"));
		prefPlanType.exportNode(new FileOutputStream(REPPREF+"POGPreferencesPlanType.xml"));
    } catch (Exception e) {}
  }

	public String get_pathPre() {
		return (String) _preferences.get("_pathPre");
	}
	
	public void set_pathPre(String pre) {
		_preferences.put("_pathPre", pre);
	}

	public String get_pathPog() {
		return (String) _preferences.get("_pathPog");
	}
	
	public void set_pathPog(String pog) {
		_preferences.put("_pathPog", pog);
	}

	public String get_pathModeleApes() {
		return (String) _preferences.get("_pathModeleApes");
	}
	
	public void set_pathModeleApes(String modeleApes) {
		_preferences.put("_pathModeleApes", modeleApes);
	}

	public boolean get_utiliseCheminModele() {
		return _preferences.get("_utiliseCheminModele").equals("oui");
	}

	public void set_utiliseCheminModele(boolean cheminModele) {
		if (cheminModele)
			_preferences.put("_utiliseCheminModele", "oui");
		else
			_preferences.put("_utiliseCheminModele", "non");
	}

	public String get_pathApes() {
		return (String) _preferences.get("_pathApes");
	}

	public void set_pathApes(String apes) {
		_preferences.put("_pathApes", apes);
	}

	public String get_pathIconeDefaut() {
		return (String) _preferences.get("_pathIconeDefaut");
	}

	public void set_pathIconeDefaut(String iconeDefaut) {
		_preferences.put("_pathIconeDefaut", iconeDefaut);
	}

	public void set_utiliseCheminModele(String cheminModele) {
		_preferences.put("_utiliseCheminModele", cheminModele);
	}

	public String get_langue() {
	  return (String) _preferences.get("_langue");
	}

	public void set_langue(String l) {
		_preferences.put("_langue", l);
	}

	public String get_laf()	{
	  return (String) _preferences.get("_laf");
	}

	public void set_laf(String laf)	{
	  try  {
		UIManager.setLookAndFeel (laf) ;
		SwingUtilities.updateComponentTreeUI(this._lnkFenetrePrincipale) ;
		_preferences.put("_laf", laf);
	  }
	  catch (Exception ex) {}
	}

	public String get_pathBiblio() {
	  return  (String) _preferences.get("_pathBiblio");
	}

	public void set_pathBiblio(String pathBiblio){
		_preferences.put("_pathBiblio", pathBiblio);
	}

	public ImageIcon getIconeTypeProduit(String typeprod) {
		if (typeprod.equals(""))
			return null;
		return getIconeDefaut(_associationProduit.get(typeprod));
	}
	
	public String getPathPlanType(String classeelement) {
		if (classeelement.equals(""))
			return null;
		return (String) _associationPlanTypes.get(classeelement);
	}
	
	public ImageIcon getIconeTypeGuide(String typeguide) {
		if (typeguide.equals(""))
			return null;
		return getIconeDefaut(_associationGuide.get(typeguide));
	}

	public String get_defIcoElem() {
		return (String) _preferences.get("_defIcoElem");
	}

	public String get_defIcoPack() {
		return (String) _preferences.get("_defIcoPack");
	}

	public void set_defIcoElem(String iconeDefaut) {
		_preferences.put("_defIcoElem", iconeDefaut);
	}

	public void set_defIcoPack(String iconeDefaut) {
		_preferences.put("_defIcoPack", iconeDefaut);
	}

	public HashMap get_plantypes() {
		return _associationPlanTypes;
	}

	public void set_plantype(HashMap m)
	  {
		this._associationPlanTypes = m ;
	  }

}