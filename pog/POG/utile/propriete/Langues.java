/*
 * POG
 * Copyright (C) 2004 Team POG
  *
 * This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


/* Generated by Together */
package POG.utile.propriete;

import java.io.File;
import java.io.FileInputStream;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;

public class Langues {

  public static final String NOMBASE = "POGLangue";
  public static final String LANGUEDEFAUT = "fr" ;
  private ResourceBundle _langue;
  
  public static boolean versionLangue(String langue) {
	FileInputStream fis = null;
	try {
		fis = new FileInputStream(Preferences.REPPREF + NOMBASE + '_' + langue + ".properties");
		ResourceBundle rbf = new PropertyResourceBundle(fis);
		int i = Integer.parseInt(rbf.getString("version"));
		ResourceBundle rs = ResourceBundle.getBundle("POG/" + NOMBASE, new Locale(langue));
		int j = Integer.parseInt(rs.getString("version"));
		fis.close();
		return (i >= j);
	} catch (Exception e) {
		try {
			fis.close();
		} catch (Exception e1) {}
	}
	return false;
  }

  public Langues(String langue) {
    try {
		Locale locale = new Locale(langue);
		FileInputStream fis = new FileInputStream(Preferences.REPPREF + NOMBASE + '_' + langue + ".properties");
      _langue = new PropertyResourceBundle(fis);
      fis.close();
      Locale.setDefault(locale);

    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public String valeurDe(String cle) {
    if ((cle.indexOf(" ") == -1) && (!cle.equals(""))) {
		try {
			cle = _langue.getString(cle.toLowerCase());
		} catch (Exception e) {
	  		System.out.println("Langue : !" + cle.toLowerCase() + "! not found");
	  		cle = "";
		}
    }
	return cle;
  }

  public boolean setLangue(String langue)
  {
    Locale locale = new Locale(langue);
    try
    {
      FileInputStream fis = new FileInputStream(Preferences.REPPREF + NOMBASE + '_' + langue + ".properties");
      _langue = new PropertyResourceBundle(fis);
      fis.close();
      Locale.setDefault(locale);
      return true;
    }
    catch (Exception e) {}
    return false;
  }

  public static Locale[] getLanguesInstallees()
  {
    ArrayList al = new ArrayList() ;
    File rep = new File(Preferences.REPPREF);
    if (rep.exists() && rep.isDirectory())
    {
      File fichiers [] = rep.listFiles(new FilenameFilter()
          {
            public boolean accept(File dir, String name)
            {
              return (name.startsWith(NOMBASE + "_") && name.endsWith(".properties"));
            }
          });
      for (int i = 0; i < fichiers.length; i++)
      {
        String nom = fichiers[i].getName();
        int debut = nom.indexOf('_');
        int fin = nom.indexOf('.');
        try {
          Locale l = new Locale(nom.substring(debut + 1, fin));
		  FileInputStream fis = new FileInputStream(fichiers [i]);
          new PropertyResourceBundle(fis);
          fis.close();
          al.add(l);
        }
        catch (Exception e) {}
      }
    }
    if (al.size() == 0)
    {
      al.add(new Locale("fr"));
    }
    Locale [] retval = new Locale [al.size()];
    int i = 0;
    for (Iterator it = al.iterator() ; it.hasNext() ; i++)
    {
      retval [i] = (Locale) it.next();
    }
    return retval ;
  }
}
