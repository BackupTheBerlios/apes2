/*
 * POG
 * Copyright (C) 2004 Team POG
  *
 * This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


/* Generated by Together */

package POG.objetMetier;

import java.io.File;

import java.io.FileFilter;

import java.util.Vector;

public class Bibliotheque {

  private String _pathBibliotheque = System.getProperty("user.home");

  /**

   * @link aggregationByValue

   * @supplierCardinality 0..*

   */

  private Contenu lnkContenu = null;



  /**

   * @link aggregationByValue

   * @supplierCardinality 1

   * @undirected

   * @bidirectional objetMetier.BibliIcone#lnkrevBibliotheque

   */

  public BibliIcone lnkBibliIcone;

  public Bibliotheque(String path){
    _pathBibliotheque = path;
    this.lnkBibliIcone = new BibliIcone (this) ;
  }

  public String getAbsolutePath(){
    return _pathBibliotheque;
  }

  public String getRelativePath(){
    String res = new String(this._pathBibliotheque);
    int index = res.lastIndexOf(File.separator);
    return res.substring(index + 1);
  }

  public Object [] filtreExtension(String path, String filt) {
    File bibli = new File(path);
    File[] listFile =  bibli.listFiles(new FiltrerExt(filt));
    Vector res = new Vector();

    for (int i = 0; i < listFile.length; i++) {
      if (listFile[i].isFile())
        res.add(listFile[i]);
      else if (listFile[i].isDirectory()) {
        Object[] tmp2 = filtreExtension(listFile[i].getAbsolutePath(), filt);
        for (int j = 0; j < tmp2.length; j++)
          res.add(tmp2[j]);
      }
    }
    return res.toArray();

  }

  public Contenu getContenu(File fichier) {
    Contenu nouveauContenu = new Contenu(fichier, _pathBibliotheque);
    return nouveauContenu;
  }

  class FiltrerExt implements FileFilter{
    private String _ext;
    public FiltrerExt (String ext) {
      _ext = ext;
    }

    //Filtre qui accepte les fichiers qui ont l'extension egale a _ext et
    //les r\uFFFDpertoires.
    public boolean accept(File fich) {
      if (fich.isDirectory())
        return true;
      else{
        int index = fich.getName().lastIndexOf(".");
        if (index == -1)
          return false;
        else
          return _ext.equalsIgnoreCase(fich.getName().substring(index + 1));
      }

    }
  }
}

