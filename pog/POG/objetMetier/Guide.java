/*
 * POG
 * Copyright (C) 2004 Team POG
  *
 * This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


/* Generated by Together */
package POG.objetMetier;

import java.io.File;
import java.io.OutputStreamWriter;

import javax.swing.ImageIcon;

import POG.application.sauvegarde.Sauvegarde;
import POG.interfaceGraphique.fenetre.FenetrePrincipale;
import POG.interfaceGraphique.utile.trace.Debug;

public class Guide extends ElementPresentation implements Sauvegarde {

  private String _type;
  /**
   *
   * @param id
   * @param ico
   * @param type Un des types statiques POG_GUIDE_XXX
   */

  public FenetrePrincipale lnkFenetrePrincipale;
  public Bibliotheque lnkBibliotheque;

  public Guide(String id, ImageIcon ico, String type) {
    super(id, ico);
    _type=type;
  }

  public boolean estValide(Debug lnkDebug) {
  	boolean ok = true;
    if (this.getContenu() == null) {
		String mess = FenetrePrincipale.langue("messverifcont");
		mess = mess.replaceFirst("ARG0", _nomPresentation);
		mess = mess.replaceFirst("ARG1", _type);
      lnkDebug.verificationMessage(mess);
      ok = false;
    }
    else if (this.getContenu().isFile()) {
    	if (!new File(this.getContenu().getAbsolutePath()).exists()) {
			String mess = FenetrePrincipale.langue("messverifcontval");
			mess = mess.replaceFirst("ARG0", _nomPresentation);
			mess = mess.replaceFirst("ARG1", _type);
			mess = mess.replaceFirst("ARG2", this.getContenu().getRelativeToBiblioPath());
			lnkDebug.verificationMessage(mess);
			ok = false;
    	}
    }
    return ok;
  }

  public void sauver(OutputStreamWriter out, boolean FlagExporter) {
    super.sauver(out, FlagExporter);
    try {
      out.write("<type>");
      out.write(this._type);
      out.write("</type>\n");
    }
    catch(Exception e){
      e.printStackTrace();
    }
  }

  public void charger(String cle, String valeur, FenetrePrincipale fp) {
    //permettrait de charger des elements au niveau inferieur
    //mais comme les guides sont deja au dernier niveau
    //elle n'est pas implementee
  }


  public String getType ()
  {
    return (this._type) ;
  }
  
  public void setType (String type) {
	 _type = type;
   }
}