/*
 * POG
 * Copyright (C) 2004 Team POG
  *
 * This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


/* Generated by Together */

package POG.application.controleurMetier;

import java.io.File;
import java.util.HashMap;
import java.util.Vector;

import org.ipsquad.apes.model.extension.SpemDiagram;
import org.ipsquad.apes.model.spem.core.ModelElement;
import org.ipsquad.apes.model.spem.process.components.ProcessComponent;
import org.ipsquad.apes.model.spem.process.structure.WorkProduct;

import POG.application.importExport.Apes;
import POG.interfaceGraphique.fenetre.FenetrePrincipale;
import POG.objetMetier.ElementPresentation;
import POG.objetMetier.PresentationElementModele;

/**
 * @stereotype control
 */
public class ControleurPresenter extends ControleurSemantique {

  public ControleurPresenter(ControleurPresentation ctrlpres) {
    super(ctrlpres);
  }

  public void nouvellePresentationSansModele(File pathBibli, String nomPres) {
    lnkControleurPresentation.nouvellePresentation(pathBibli, nomPres); //, ElementPresentation.POG_RACINE_PAQUETAGE);
  }

  public boolean nouvellePresentationAvecModele(File pathModele, String nomPres, File pathBibli) {
    int nbElem;
    int i;
    ProcessComponent monproc = null;
    monproc = Apes.loadModel(pathModele);
    if (monproc == null) {
      return false;
    }

    this.lnkControleurPresentation.nouvellePresentation(monproc, pathBibli.getAbsolutePath(), pathModele);
    synchroniserApes(true);
    return true;
  }


  public boolean synchroniserApes(boolean flag) {
    /* On recupere les elements de modele connus dans POG et on les place dans le vecteur oldElements*/
    if (lnkControleurPresentation.getlnkPresentation().lnkProcessComponent == null)
      return true;
    HashMap modelpog = new HashMap();
    Object[] tpog = lnkControleurPresentation.getlnkPresentation().listeElementPresentation();
    
    // Etape 1 : SUPPRIMER on enlève de POG ceux qui ne sont plus dans le modèle APES
    
    for (int i = 0; i < tpog.length; i++) {
      FenetrePrincipale.INSTANCE.getLnkDebug().patienter("syncapes", i, tpog.length * 3);
      if (tpog[i] instanceof PresentationElementModele)
        if ( ( (PresentationElementModele) tpog[i]).getLnkModelElement() == null)
          if (flag)
            lnkControleurPresentation.getlnkPresentation().removeElementAndUp(((PresentationElementModele)tpog[i]).get_id());
          else
            return false;
        else {
          ModelElement md = Apes.getElementByID(((PresentationElementModele)tpog[i]).getLnkModelElement().getID());
          if ( (md == null) && !flag)
            return false;
          else if (md == null)
            lnkControleurPresentation.getlnkPresentation().removeElementAndUp(((PresentationElementModele)tpog[i]).get_id());
          else if ((md != ((PresentationElementModele)tpog[i]).getLnkModelElement()) && flag)
            ((PresentationElementModele)tpog[i]).setModelElement(md);

// Si ce sont des diagrammes, on corrige leur nom
          if (md instanceof SpemDiagram)
            ((PresentationElementModele)tpog[i]).set_nomPresentation(md.getName());
          modelpog.put(md, tpog[i]);
        }
    }
    
	//	Etape 2 : NOUVEAU on ajoute ceux de APES qui ne sont pas dans POG
    
    Vector vapes = Apes.getListeElementApes();
    for (int i = 0; i < vapes.size(); i++) {
      FenetrePrincipale.INSTANCE.getLnkDebug().patienter("syncapes", 33 * 3 * vapes.size() + i, vapes.size() * 3);
      if (!modelpog.containsKey(vapes.get(i))) {
        ModelElement md = (ModelElement) vapes.get(i);
        if (md instanceof WorkProduct)
          if ( ( (WorkProduct) md).getReferences() ==
              WorkProduct.REFERENCES_BY_REQUIRED_INTERFACE)
            continue;
        PresentationElementModele pere = (PresentationElementModele) modelpog.
            get(md.getParent());
        if (pere == null)
          continue;
        if (!flag)
          return false;
        PresentationElementModele pp = new PresentationElementModele(lnkControleurPresentation.getlnkPresentation().makeId(pere.get_id()), lnkControleurPresentation.lnkPreferences.getIconeDefaut(md), md);
        lnkControleurPresentation.getlnkPresentation().ajouterElementPresentation(pp);
        modelpog.put(md, pp);
      }
    }
    
    // Etape 3 : DEPLACER on remet à leurs place les éléments déplacé.
    
    tpog = lnkControleurPresentation.getlnkPresentation().
        listeElementPresentation();
    for (int i = 0; i < tpog.length; i++) {
		FenetrePrincipale.INSTANCE.getLnkDebug().patienter("syncapes", 66 * 3 * tpog.length + i, tpog.length * 3);
      if (tpog[i] instanceof PresentationElementModele) {
        PresentationElementModele pere = (PresentationElementModele) modelpog.get(((PresentationElementModele)tpog[i]).getLnkModelElement().getParent());
        if (pere != null) {
          String myid = ( (PresentationElementModele) tpog[i]).get_id();
          if (!myid.substring(0, myid.lastIndexOf("-")).equals(pere.get_id())) {
            if (flag) {
              lnkControleurPresentation.getlnkPresentation().removeElementAndUp(((ElementPresentation)tpog[i]).get_id());
              ((PresentationElementModele) tpog[i]).set_id(lnkControleurPresentation.getlnkPresentation().makeId(pere.get_id()));
              lnkControleurPresentation.getlnkPresentation().ajouterElementPresentation((ElementPresentation)tpog[i]);
            }
            else
              return false;
          }
        }
      }
    }
    return true;
  }
}