/*
 * POG
 * Copyright (C) 2004 Team POG
  *
 * This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


/*

 * DialogueApercu.java

 *

 * Created on 13 avril 2002, 16:33

 */



package POG.outil.html.pika;



import java.awt.Graphics;

import java.awt.Cursor;

import java.awt.Rectangle;

import java.awt.print.Printable;

import java.awt.print.PageFormat;

import java.awt.print.PrinterException;

import java.awt.print.PrinterJob;

import javax.swing.JOptionPane;

import javax.swing.plaf.basic.BasicTextUI;

import javax.swing.text.BoxView;

import javax.swing.text.Element;

import javax.swing.text.View;



/**

 *

 * @author  Administrateur

 */



public class DialogueApercu extends javax.swing.JDialog implements Printable{

    /** A return status code - returned if Cancel button has been pressed */

    public static final int RET_CANCEL = 0;

    /** A return status code - returned if OK button has been pressed */

    public static final int RET_OK = 1;



    /** Creates new form DialogueApercu */

    public DialogueApercu(java.awt.Frame parent, boolean modal,String uneString) {

        super(parent, modal);

        initComponents();

        editeur.setText(uneString);

    }



    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */

    public int getReturnStatus() {

        return returnStatus;

    }



    /** This method is called from within the constructor to

     * initialize the form.

     * WARNING: Do NOT modify this code. The content of this method is

     * always regenerated by the Form Editor.

     */

    private void initComponents() {//GEN-BEGIN:initComponents

        buttonPanel = new javax.swing.JPanel();

        okButton = new javax.swing.JButton();

        printbouton = new javax.swing.JButton();

        jScrollPane1 = new javax.swing.JScrollPane();

        editeur = new javax.swing.JEditorPane();



        setTitle("Apercu HTML");

        setModal(true);

        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {

                closeDialog(evt);

            }

        });



        okButton.setText("OK");

        okButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                okButtonActionPerformed(evt);

            }

        });



        buttonPanel.add(okButton);



        printbouton.setText("Imprimer");

        printbouton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                printboutonActionPerformed(evt);

            }

        });



        buttonPanel.add(printbouton);



        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);



        editeur.setContentType("text/html");

        jScrollPane1.setViewportView(editeur);



        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);



        pack();

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();

        setSize(new java.awt.Dimension(500, 400));

        setLocation((screenSize.width-500)/2,(screenSize.height-400)/2);

    }//GEN-END:initComponents



    private void printboutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printboutonActionPerformed

        // Add your handling code here:

        Thread runner = new Thread() {

          public void run() {

            PrintData();

          }

        };

        runner.start();

    }//GEN-LAST:event_printboutonActionPerformed



    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        doClose(RET_OK);

    }//GEN-LAST:event_okButtonActionPerformed



    /** Closes the dialog */

    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog

        doClose(RET_CANCEL);

    }//GEN-LAST:event_closeDialog



    private void doClose(int retStatus) {

        returnStatus = retStatus;

        setVisible(false);

        dispose();

    }



    private void PrintData() {

      try {

      PrinterJob prnJob = PrinterJob.getPrinterJob();

      prnJob.setPrintable(this);

      if (!prnJob.printDialog())

        return;

      setCursor( Cursor.getPredefinedCursor(

        Cursor.WAIT_CURSOR));

      prnJob.print();

      setCursor( Cursor.getPredefinedCursor(

        Cursor.DEFAULT_CURSOR));

      JOptionPane.showMessageDialog(this,

        "Impression terminee", "Impression",

        JOptionPane.INFORMATION_MESSAGE);

    }

    catch (PrinterException e) {

      e.printStackTrace();

      System.err.println("Printing error: "+e.toString());

    }

    }



   public int print(Graphics pg, PageFormat pageFormat,

   int pageIndex) throws PrinterException {

    pg.translate((int)pageFormat.getImageableX(),

      (int)pageFormat.getImageableY());

    int wPage = (int)pageFormat.getImageableWidth();

    int hPage = (int)pageFormat.getImageableHeight();

    pg.setClip(0, 0, wPage, hPage);



    // Only do this once per print

    if (m_printView == null) {

      BasicTextUI btui = (BasicTextUI)editeur.getUI();

      View root = btui.getRootView(editeur);

      m_printView = new PrintView(

        editeur.getDocument().getDefaultRootElement(),

        root, wPage, hPage);

    }



    boolean bContinue = m_printView.paintPage(pg,

      hPage, pageIndex);

    System.gc();



    if (bContinue)

      return PAGE_EXISTS;

    else {

      m_printView = null;

      return NO_SUCH_PAGE;

    }

  }



  class PrintView extends BoxView

  {

  protected int m_firstOnPage = 0;

    protected int m_lastOnPage = 0;

    protected int m_pageIndex = 0;



    public PrintView(Element elem, View root, int w, int h) {

      super(elem, Y_AXIS);

      setParent(root);

      setSize(w, h);

      layout(w, h);

    }



    public boolean paintPage(Graphics g, int hPage,

     int pageIndex) {

      if (pageIndex > m_pageIndex) {

        m_firstOnPage = m_lastOnPage + 1;

        if (m_firstOnPage >= getViewCount())

          return false;

        m_pageIndex = pageIndex;

      }

      int yMin = getOffset(Y_AXIS, m_firstOnPage);

      int yMax = yMin + hPage;

      Rectangle rc = new Rectangle();



      for (int k = m_firstOnPage; k < getViewCount(); k++) {

        rc.x = getOffset(X_AXIS, k);

        rc.y = getOffset(Y_AXIS, k);

        rc.width = getSpan(X_AXIS, k);

        rc.height = getSpan(Y_AXIS, k);

        if (rc.y+rc.height > yMax)

          break;

        m_lastOnPage = k;

        rc.y -= yMin;

        paintChild(g, rc, k);

      }

      return true;

    }

  }



  // Variables declaration - do not modify//GEN-BEGIN:variables

  private javax.swing.JPanel buttonPanel;

  private javax.swing.JButton okButton;

  private javax.swing.JButton printbouton;

  private javax.swing.JScrollPane jScrollPane1;

  private javax.swing.JEditorPane editeur;

  // End of variables declaration//GEN-END:variables



    private int returnStatus = RET_CANCEL;

    protected PrintView m_printView;



}

